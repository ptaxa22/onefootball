import asyncio
import aiohttp
import time
from eth_account import Account
from web3.auto import w3
from src.utils import create_signature

MAX_CONCURRENT_TASKS = 20
sleep = 1
ref = 's6vtkNva'

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
async def load_lines_async(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file.readlines()]

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏
async def make_request(session, url, method="GET", headers=None, json_data=None, proxy=None):
    try:
        async with session.request(method, url, headers=headers, json=json_data, proxy=proxy) as response:
            return await response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
async def process_wallet(session, pk, proxy, semaphore, i):
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        account = Account.from_key(pk)
        address = account.address

        headers = {
            'accept': 'application/json, text/plain, */*',
            'content-type': 'application/json',
            'origin': 'https://dashboard.layeredge.io',
            'referer': 'https://dashboard.layeredge.io/',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36',
        }

        # print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ—à–µ–ª—ë–∫: {address} (–ü—Ä–æ–∫—Å–∏: {proxy})")

        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
        json_data = {'walletAddress': address}
        response = await make_request(session,
                                      f'https://referralapi.layeredge.io/api/referral/register-wallet/{ref}',
                                      "POST", headers, json_data, proxy)
        print(f"[{address}] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {response}")

        await asyncio.sleep(sleep)

        # 2. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–∑–ª–∞
        timestamp_ms = int(time.time() * 1000)
        message = f'Node activation request for {address} at {timestamp_ms}'
        sign = await create_signature(message, pk)

        json_data = {'sign': sign, 'timestamp': timestamp_ms}
        response = await make_request(session,
                                      f'https://referralapi.layeredge.io/api/light-node/node-action/{address}/start',
                                      "POST", headers, json_data, proxy)
        # print(f"[{address}] –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É–∑–ª–∞: {response}")

        await asyncio.sleep(sleep)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–∑–ª–∞
        response = await make_request(session,
                                      f'https://referralapi.layeredge.io/api/light-node/node-status/{address}',
                                      "GET", headers, proxy=proxy)
        # print(f"[{address}] –°—Ç–∞—Ç—É—Å —É–∑–ª–∞: {response}")

        await asyncio.sleep(sleep)

        # 4. –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤
        timestamp_ms = int(time.time() * 1000)
        message = f'I am claiming my daily node point for {address} at {timestamp_ms}'
        sign = await create_signature(message, pk)

        json_data = {'walletAddress': address, 'timestamp': timestamp_ms, 'sign': sign}
        response = await make_request(session,
                                      'https://referralapi.layeredge.io/api/light-node/claim-node-points',
                                      "POST", headers, json_data, proxy)
        print(f"[{address}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∫–∏: {response}")

        await asyncio.sleep(sleep)

        # 5. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞
        response = await make_request(session,
                                      f'https://referralapi.layeredge.io/api/referral/wallet-details/{address}',
                                      "GET", headers, proxy=proxy)

        node_points = response.get("data", {}).get("nodePoints", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        print(f"üîπ{i} || {address} –í—Å–µ–≥–æ Node Points: {node_points}\n")

        return node_points

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ –ø—Ä–æ–∫—Å–∏
    private_keys = await load_lines_async("../txt/private_keys.txt")
    proxies = await load_lines_async("../txt/proxies.txt")

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–æ–∫—Å–∏ >= —á–∏—Å–ª–æ –∫–æ—à–µ–ª—å–∫–æ–≤
    if len(proxies) < len(private_keys):
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–º –∫–æ—à–µ–ª—å–∫–∞–º –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ö–≤–∞—Ç–∏—Ç!")

    # –°–æ–∑–¥–∞—ë–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
    semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é aiohttp
    async with aiohttp.ClientSession() as session:
        tasks = []
        for i, pk in enumerate(private_keys):
            proxy = proxies[i % len(proxies)]  # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Ü–∏–∫–ª–∏—á–Ω–æ
            tasks.append(process_wallet(session, pk, proxy, semaphore, i))

        node_points_list = await asyncio.gather(*tasks)

    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º
    print("\nüîπ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for i, pk in enumerate(private_keys):
        address = Account.from_key(pk).address
        print(f"[{address}] –ò—Ç–æ–≥–æ–≤—ã–µ Node Points: {node_points_list[i]}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    asyncio.run(main())
